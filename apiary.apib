FORMAT: 1A

# User API
The user API is a collection of services related to the users data. Those services can be 
used to register a new user, create, update and delete user data e.g. name, address.

# Appendix
A Property can be left empty if minimum length equals zero.

## User properties

| Name      |      Type         |  Description  | Constraints | Min.-Length | Max.-Length |
|----------|:-------------:|:------:|------|:------:|------|------|
| id     |  String     | Public id to identify an user. Choosen automatically. | None (not editable) |
| address     |  Array[Object]     | Array of address objects. | See address properties for more informations. | 0 | 10 |
| cancellationpolicy     |  String     | Cancellation policy, mandatory for companies in germany. | Pattern: [0-9a-zA-Z!?.:;-\n_] + whitespace | 0 | 50000 |
| company     |  String     | Company name. | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 100 |
| companyregister     |  String     | Place where the company is registred, mandatory for companies in germany e.g. HRB 123456 | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 100 |
| country     |  Enum     | Country the user is from. | Must be a 2 letter code according to [ISO-3166-1](https://github.com/ndheitypi/AblIMardEA-Users/wiki/Country-Codes) | 1 | 1 |
| email     |  String     | Email address. Used to login. | Unique. Well-formed email address. | 5 | 50 |
| feedback     |  Array[Object]     | Array of feedback objects. |  See feedback properties for more informations.  | 0 | * |
| feedbackneutral     |  Integer     | Number of neutral feedbacks. |  Valid Integer.  | >=0 | * |
| feedbacknegative     |  Integer     | Number of negative feedbacks. |  Valid Integer.  | >=0 | * |
| feedbackpositive     |  Integer     | Number of positive feedbacks. |  Valid Integer.  | >=0 | * |
| feedbackempty     |  Integer     | Number of auctions without feedback. |  Valid Integer.  | >=0 | * |
| firstname1 |  String     | 1. First name | Pattern: [0-9a-zA-Z_-] + whitespace | 2 | 100 |
| firstname2 |  String     | 2. First name | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 100 |
| firstname3 |  String     | 3. First name | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 100 |
| gender     |  Enum     | Gender.  | One of: M, W, null | 0 | 1 |
| iscompany     |  Boolean     | True if the user is a company. | TRUE or FALSE | 1 | 1 |
| language     |  Enum     | Preffered language for this website. | One of: DE,EN,ES,FR | 1 | 1 |
| lastname     |  String     | Last name. | Pattern: [0-9a-zA-Z_-] + whitespace | 2 | 100 |
| password     |  String     | The user password. | Pattern: [0-9a-zA-Z_-] | 5 | 50 |
| sbt     |  String     | Standard business terms, mandatory for companies in germany. | Pattern: [0-9a-zA-Z!?.:;-\n_] + whitespace | 0 | 50000 |
| taxnumber     |  String     | Tax id of company, mandatory for companies in germany e.g. DE 123456789 | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 100 |
| timezone     |  Enum     | Timezone the user is in, e.g. Pacific/Auckland | Valid timezine enum. Standard is Europe/London. | 0 | 1 |
| username     |  String     | Username. | Unique. Pattern: [0-9a-zA-Z_-] | 3 | 100 |

## Address properties

| Name      |      Type         |  Description  | Constraints | Min.-Length | Max.-Length |
|----------|:-------------:|:------:|------|:------:|------|------|
| default |  Boolean     | Default address. Always true when there is only on address. | Not null. | 1 | 1 |
| apartment     |  String     | Apartment number. | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 10 |
| country     |  Enum     | Country | Must be a 2 letter code according to [ISO-3166-1](https://github.com/ndheitypi/AblIMardEA-Users/wiki/Country-Codes) | 1 | 1 |
| fax |  String     | Phone | Pattern: [0-9.+-()] + whitespace | 0 | 50 |
| housenumber     |  String     | House number. | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 10 |
| phone |  String     | Phone | Pattern: [0-9.+-()] + whitespace | 0 | 50 |
| postcode |  String     | Postcode | Pattern: [0-9] | 3 | 10 |
| street     |  String     | Street | Pattern: [0-9a-zA-Z_-] + whitespace | 3 | 50 |
| street2     |  String     | Additional address informations. | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 50 |
| suburb     |  String     | Suburb | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 50 |
| state     |  String     | State | Pattern: [0-9a-zA-Z_-] + whitespace | 0 | 50 |
| town |  String     | Town | Pattern: [0-9a-zA-Z_-] + whitespace | 2 | 50 |

## Feedback properties

| Name      |      Type         |  Description  | Constraints | Min.-Length | Max.-Length |
|----------|:-------------:|:------:|------|:------:|------|------|
| userid     |  String     | Public user id to identify the user who gave this feedback. Choosen automatically. | None (not editable) |
| date     |  Timestamp     | When was the feedback created in seconds since 1970 (UTC). | Valid timestamp. | 1 | 1 |
| acticletitle     |  String     | The title of the article this feedback is about. | [0-9a-zA-Z_-] + whitespace |  255 | 255 |
| articleid     |  String     | Id of the article this feedback is about. | Valid Id. |  255 | 255 |
| type |  Enum     | Type of feedback. 1=Negative, 2=Neutral, 3=Positiv | One of: 1, 2, 3 | 1 | 1 |
| text     |  String     | The users feedback. | [0-9a-zA-Z!?.,:;-\n_] + whitespace |  255 | 255 |
| wasbuyer     |  Boolean     | TRUE if the user who received the feedback was the buyer. FALSE if he was the seller. |  Not null. Valid Boolean.  | 1 | 1 |

# Group Admin functions
## List all users [/admin/users]
| Name      |      Content         | 
|----------|:-------------:|
| URL:     |  **/admin/users**     | 
| Parameter:     |  None    |
| Request-Type:     |  **GET**     | 
| Request-Body:     |  *SearchRequest* (Optional)     | 
| Required permission:     |  Administrator |

Returns a list containing all users if the request body is empty. The user list can be searched and filtered 
by sending a *search* body. 
### Get list of users [GET]
| Name      |      Content         | 
|----------|:-------------:|
| URL:     |  **/admin/users/**    | 
| Parameter:     |  None    |
| Request-Type:     |  **POST**     | 
| Request-Body:     |  *CreateUserRequest*     | 
| Required permission:     |  Administrator |

+ Response 200 (application/json)

        {
            "paging": {
                "page": 1
                "pagesize": 10
                "totalcount": 2
            },
            "list": [{
              "id": "XZSDGWUZTGSJDGZU"
              ,"country": null
              ,"language": "EN"
              ,"email": "john@test.com"
              ,"firstname1": "John"
              ,"lastname": "Doe"
              ,"username": "johndoe"
            }, {
              "id": "XZSDGWUZTGSJDGAB"
              ,"country": null
              ,"language": "EN"
              ,"email": "jane@test.com"
              ,"firstname1": "Jane"
              ,"lastname": "Doe"
              ,"username": "janedoe"
            }]
        }
        
### Create new user [POST]
+ Request (application/json)

        {
            "user": {
                "email":"test6@test.de"
                ,"username":"test5"
                ,"lang":"DE"
            }
            ,"passwordRequest": {
                "pass":"12345"
            }
        }

+ Response 200 (application/json)

## Specific user [/admin/users/{user_id}]

| Name      |      Content         | 
|----------|:-------------:|
| URL:     |  **/admin/users**    | 
| Parameter:     |  user_id: UserId in form of a string.    |
| Request-Type:     |  **GET**     | 
| Request-Body:     |  None     | 
| Required permission:     |  Administrator |

+ Parameters
    + user_id (required, string, `XZSDGWUZTGSJDGZU`) ... ID of the user in form of a string.
    
### Get user details [GET]
+ Response 200 (application/json)

        {
            "id": "XZSDGWUZTGSJDGZU"
            ,"country": null
            ,"language": "EN"
            ,"email": "john@test.com"
            ,"firstname1": "John"
            ,"lastname": "Doe"
            ,"username": "johndoe"
        }
        
# Group Public functions

## Show public user profile [/users/{user_id}]
| Name      |      Content         | 
|----------|:-------------:|
| URL:     |  **/users/{user_id}**     |
| Parameter:     |  user_id: UserId in form of a string.    |
| Request-Type:     |  **GET**     | 
| Request-Body:     |  None     | 
| Required permission:     |  None |

Returns a list containing all users if the request body is empty. The user list can be searched and filtered by sending a search body. 

+ Parameters
    + user_id (required, string, `XZSDGWUZTGSJDGZU`) ... ID of the user in form of a string.

### Get public user profile [GET]
+ Response 200 (application/json)

        {
            "user": {
              "id": "XZSDGWUZTGSJDGZU"
              ,"country": null
              ,"firstname1": "John"
              ,"lastname": "Doe"
              ,"username": "johndoe"
              ,"feedback": {
                "totalcount": 5
                "averagescore": 3.5
              }
            }
        }